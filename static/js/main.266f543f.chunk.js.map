{"version":3,"sources":["components/adminlist.js","components/project-manager/WelcomeHeader.js","components/project-manager/Header.js","components/categorieslist.js","components/project-manager/AddProject.js","components/project-manager/AdminForm.js","components/project-manager/Admin.js","components/project-manager/InvalidCategory.js","components/project-manager/Card.js","components/project-manager/BienvenueAdmin.js","components/project-manager/Filters.js","base.js","App.js","components/project-manager/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["adminlist","Array","push","WelcomeHeader","_this$props","this","props","pseudo","welcome","react_default","a","createElement","className","Component","Header","state","nStateHeader","signButton","toggleHeaderInfo","_this","setState","_this2","cpt","pm","id","project_manager_WelcomeHeader","onClick","includes","target","href","categoriesList","fs","require","AddProject","nom","categories","command","description","notes","pattern","createPatternFolderProject","mkdirSync","console","log","err","code","handleChange","event","_event$target","name","value","Object","defineProperty","handleSubmit","preventDefault","project","objectSpread","categorieslist","refs","isPattern","checked","addProject","keys","forEach","item","alert","onSubmit","onChange","type","placeholder","rows","style","marginLeft","color","ref","AdminForm","_ref","key","updateProject","projects","deleteProject","class","e","Admin","project_manager_AddProject","map","project_manager_AdminForm","InvalidCategory","Card","isFinished","checkBold","details","split","project_manager_InvalidCategory","fontWeight","textTransform","textDecoration","BienvenueAdmin","textAlign","reactjs_popup_es","trigger","cursor","position","close","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","localStorage","setItem","App","match","params","nState","toggleAdminPartInner","activeFilter","adminList","d","Date","concat","now","getFullYear","getMonth","getDate","newProject","isCorrect","CONFIRMATION_CODE","Math","random","toString","PROJECT_DELETED","NEW_DATE_OBJECT","CURRENT_DATE","getHours","getMinutes","getSeconds","askForCode","prompt","toggleAdminPart","toggleTDLPart","toggleDisplayTDLInner","toggleDisplayTDL","filter","checkboxes_","document","querySelectorAll","resultsStates","cptTrue","finalUpdateState","i","length","j","renderCards","isFilter","cards","listProjId","test_","project_manager_Card","syncState","context","removeBinding","project_manager_Header","project_manager_BienvenueAdmin","project_manager_Admin","Connexion","password","correctPassword","goToApp","PASSWORDCLASSLIST","querySelector","classList","DEVNAMECLASSLIST","add","remove","Redirect","to","required","marginTop","fontSize","NotFound","Boolean","window","location","hostname","ReactDOM","render","HashRouter","Switch","Route","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.266f543f.chunk.js","sourcesContent":["const adminlist = new Array\r\nadminlist.push('Simon')\r\n\r\nexport default adminlist","import React, { Component } from 'react'\r\n\r\nclass WelcomeHeader extends Component {\r\n    render() {\r\n        const { pseudo, welcome } = this.props\r\n        return(\r\n            <div className=\"row\">\r\n                <h1\r\n                    pseudo={pseudo} \r\n                    welcome={welcome} \r\n                    className=\"row\"\r\n                >\r\n                    {pseudo}{welcome}\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomeHeader","import React, { Component } from 'react'\r\n\r\nimport adminlist from '../adminlist'\r\nimport WelcomeHeader from './WelcomeHeader'\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        nStateHeader: false,\r\n        signButton: '+',\r\n    }\r\n    toggleHeaderInfo = () => {\r\n        if(this.state.signButton===\"+\") {\r\n            this.state.signButton=\"-\"\r\n        } else {\r\n            this.state.signButton=\"+\"\r\n        }\r\n        this.setState({ nStateHeader: !this.state.nStateHeader })    \r\n    }\r\n    render() {\r\n        const { pseudo, cpt } = this.props  \r\n        const pm = \"\\'s Project Manager\"\r\n        return(\r\n            <header>\r\n                {\r\n                    !this.state.nStateHeader ? (\r\n                        <div id=\"hiddenHeader\" className=\"rows\">\r\n                            <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                            <button \r\n                                className=\"row\" \r\n                                id=\"revealHeader\"\r\n                                onClick={() => this.toggleHeaderInfo()}\r\n                            >\r\n                                {this.state.signButton}\r\n                            </button>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <div id=\"showedHeader\" className=\"rows\">\r\n                                <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                                <button \r\n                                    className=\"row\" \r\n                                    id=\"revealHeader\"\r\n                                    onClick={() => this.toggleHeaderInfo()}\r\n                                >\r\n                                    {this.state.signButton}\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"moreInfoHeader\">\r\n                                <h3 id=\"cptProj\">{cpt} projets en cours!</h3>\r\n                                {\r\n                                    adminlist.includes(pseudo) ? (\r\n                                        <a \r\n                                            onClick={ () => this.toggleHeaderInfo() }\r\n                                            id=\"fireLink\" \r\n                                            target=\"_blank\" \r\n                                            href=\"https://console.firebase.google.com/project/projectmanager-67f9c/database/projectmanager-67f9c/data\"\r\n                                        >\r\n                                            RealTime DataBase - Firebase ↗\r\n                                        </a>\r\n                                    ) : (\r\n                                        <div />\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","const categoriesList = ['IA', 'WebSite-App', 'Software', 'AppMobile', 'Autre']\r\nexport default categoriesList","import React, { Component } from 'react'\r\n\r\nimport categorieslist from '../categorieslist'\r\n\r\nvar fs = require('fs')\r\n\r\nclass AddProject extends Component {\r\n    state = {\r\n        nom: '',\r\n        categories: '',\r\n        command: '',\r\n        description: '',\r\n        notes: '',\r\n        pattern: ''\r\n    }\r\n\r\n    createPatternFolderProject = () => {\r\n        var path = \"C:/Users/simon/OneDrive/Documents/PROGRAMMATION/PROJETS-PM/testFolder\"\r\n        try{\r\n            fs.mkdirSync(path)\r\n            console.log('testFolder directory created')\r\n        } catch(err) {\r\n            if(err.code == 'EEXIST') {\r\n                console.log('The directory named testFolder exists')\r\n            } else {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const project = { ...this.state }\r\n        // check data\r\n        if(project.nom) {\r\n            if(project.description) {\r\n                if(project.categories) {\r\n                    if(categorieslist.includes(project.categories)) {\r\n                        if(this.refs.isPattern.checked){\r\n                            this.setState({ pattern: true })\r\n                            // this.createPatternFolderProject()\r\n                        } else {\r\n                            this.setState({ pattern: false })\r\n                        }\r\n                        this.props.addProject(project)\r\n                        // Reset form\r\n                        Object.keys(project).forEach(item => {\r\n                            project[item] = ''\r\n                        })\r\n                        this.refs.isPattern.checked = false\r\n                        this.setState({ ...project })    \r\n                    } else {\r\n                        alert('La catégorie renseignée ne fait pas partie des catégories disponibles: ' + categorieslist)\r\n                    }\r\n                } else {\r\n                    alert('Indiquez une catégorie de project parmis: ' + categorieslist)\r\n                }\r\n            } else {\r\n                alert('Donnez une description, même courte à votre nouveau projet!')\r\n            }\r\n        } else {\r\n            alert('Donnez un nom à votre projet!')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <form \r\n                    className=\"admin-form ajouter-recette\" \r\n                    onSubmit={ this.handleSubmit }\r\n                >\r\n                    <input \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.nom } \r\n                        name=\"nom\" \r\n                        type=\"text\" \r\n                        placeholder=\"ProjectName*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value={ this.state.categories }\r\n                        name=\"categories\"\r\n                        type=\"text\"\r\n                        placeholder=\"Category*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value= { this.state.command }\r\n                        name=\"command\"\r\n                        type=\"text\"\r\n                        placeholder=\"Batch Command\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.description } \r\n                        name=\"description\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Description*\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.notes } \r\n                        name=\"notes\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Notes\" \r\n                    />\r\n                    <div className=\"rows\">\r\n                        <div style={{marginLeft: '5px'}}>\r\n                            <label style={{color: 'gray'}} className=\"row\">\r\n                                Create pattern folder ?\r\n                            </label>\r\n                            &nbsp;&nbsp;\r\n                            <input \r\n                                className=\"row\"\r\n                                type=\"checkbox\"\r\n                                name=\"isPattern\"\r\n                                id=\"isPattern\"\r\n                                ref=\"isPattern\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\">+ Add project</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddProject","import React from 'react'\r\n\r\nconst AdminForm = ({\r\n    id: key,\r\n    updateProject,\r\n    projects,\r\n    deleteProject\r\n}) => {\r\n    const project = projects[key]\r\n    const handleChange = (event, key) => {\r\n        const { name, value } = event.target\r\n        const project = projects[key]\r\n        project[name] = value\r\n        updateProject(key, project)\r\n    }\r\n    return (\r\n        <div className=\"card\">\r\n            <form className=\"admin-form\">\r\n                <input \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.nom}\r\n                    name=\"nom\" \r\n                    type=\"text\" \r\n                    placeholder=\"ProjectName\" \r\n                />\r\n                <input \r\n                    class=\"row\"\r\n                    onChange={ event => handleChange(event, key) }\r\n                    value={ project.categories }\r\n                    name=\"categories\"\r\n                    type=\"text\"\r\n                    placeholder=\"Categories\"\r\n                />\r\n                <input \r\n                    onChange={event => handleChange(event, key) }\r\n                    value= { project.command }\r\n                    name=\"command\"\r\n                    type=\"text\"\r\n                    placeholder=\"Batch Command\"\r\n                />\r\n                <textarea \r\n                    onChange={e => handleChange(e, key)}\r\n                    value={project.description}\r\n                    name=\"description\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Description\"\r\n                />\r\n                <textarea \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.notes}\r\n                    name=\"notes\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Notes\" \r\n                />\r\n                {/* <div className=\"rows\">\r\n                    <input \r\n                        className=\"row\"\r\n                        onChange={event => handleChangeCheckbox(event, key)}\r\n                        type=\"radio\"\r\n                        name=\"isFinished\"\r\n                        id=\"isFinished\"\r\n                    />\r\n                    &nbsp;&nbsp;\r\n                    <label className=\"row\" for=\"isFinished\">Finished/StableVersion</label>\r\n                </div> */}\r\n            </form>\r\n            <button onClick={() => deleteProject(key)}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminForm","import React, { Component } from 'react';\r\n\r\nimport AddProject from './AddProject'\r\nimport AdminForm from './AdminForm'\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n        const { projects, addProject, updateProject, deleteProject } = this.props\r\n        return (\r\n            <div className=\"cards\">\r\n                <AddProject addProject={addProject} />\r\n                {\r\n                    Object.keys(projects)\r\n                        .map(key => \r\n                            <AdminForm\r\n                                key={key}\r\n                                id={key}\r\n                                updateProject={updateProject}\r\n                                deleteProject={deleteProject}\r\n                                projects={projects}\r\n                            />\r\n                        )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin","import React, { Component } from \"react\"\r\n\r\nclass InvalidCategory extends Component {\r\n    render() {\r\n        return (\r\n            <p id=\"invalid-category\">Please, update the project's category now!</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InvalidCategory","import React, { Component } from 'react'\r\n\r\nimport categorieslist from '../categorieslist'\r\n\r\nimport InvalidCategory from './InvalidCategory'\r\n\r\nclass Card extends Component {\r\n    state = {\r\n        isFinished: false\r\n    }\r\n\r\n    checkBold = () => {\r\n        let notesString = this.props.details.notes\r\n        return notesString\r\n    }\r\n\r\n    // handleFinished = () => {\r\n    //     this.setState({ isFinished: !this.state.isFinished })\r\n    // }\r\n\r\n    render() {\r\n        const { details } = this.props\r\n        const notes = details.notes\r\n            .split('\\n')\r\n            .map(item => \r\n                <li \r\n                    className=\"row\" \r\n                    key={item}\r\n                    // onDoubleClick={() => this.checkBold()}\r\n                >\r\n                    {item}\r\n                </li>\r\n            )\r\n        return (\r\n            <div className={ this.state.isFinished ? 'finishedCard' : 'card' }>\r\n                    <div className=\"recette\">\r\n                        <h2 class=\"projectTitle\" >{details.nom}</h2>\r\n                        {/* <div>\r\n                            <input \r\n                                type=\"checkbox\" \r\n                                name=\"isFinished\" \r\n                                id=\"isFinished\" \r\n                                className=\"isFinishedClass\"\r\n                                onChange={ () => this.handleFinished() }\r\n                            />\r\n                            &nbsp;\r\n                            <label id=\"isFinishedLabel\" for=\"isFinished\">Finished/StableVersion</label>\r\n                        </div> */}\r\n                        {\r\n                            !details.categories ? (\r\n                                <InvalidCategory />\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        {\r\n                            categorieslist.includes(details.categories) ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;&nbsp;\r\n                                    <span style={{fontWeight: 'bold'}}>\r\n                                        {\r\n                                            details.categories\r\n                                        }\r\n                                    </span>     \r\n                                </p>\r\n                            ) : (\r\n                                \r\n                                <p class=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;\r\n                                    <span style={{fontWeight: 'bold', textTransform: 'uppercase', textDecoration: 'underline'}}>\r\n                                        invalid\r\n                                    </span>\r\n                                </p>\r\n                            )\r\n                        }\r\n                        {\r\n                            details.command ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    BatchCommand:  \r\n                                    <span \r\n                                        style={{fontWeight: 'bold', marginLeft: '5px'}}>\r\n                                        {details.command}\r\n                                    </span>\r\n                                </p>\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        <div className=\"description\">\r\n                            <h4>{ details.description }</h4>\r\n                        </div>\r\n                        <ul>\r\n                            { notes }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react'\r\n\r\nimport Popup from \"reactjs-popup\"\r\nimport adminlist from '../adminlist'\r\n\r\nclass BienvenueAdmin extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <Popup\r\n                    trigger={\r\n                        <h3\r\n                            style={{\r\n                                textDecoration: 'underline',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Bienvenue sur votre compte administrateur\r\n                        </h3>\r\n                    }\r\n                    position=\"bottom center\"\r\n                >\r\n                    {\r\n                        close => (\r\n                            <div>\r\n                                Admin(s): { adminlist }\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <a className=\"close\" onClick={close}>\r\n                                    &times;\r\n                                </a>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BienvenueAdmin","import React, { Component } from 'react'\r\n\r\nclass Filters extends Component {\r\n     render() {\r\n          return (\r\n               <div className=\"filtersRenderCards rows\">\r\n                    <div className=\"filterTitle row\">\r\n                         <h3 id=\"noMgTitleFilters\">Filters</h3>\r\n                    </div>\r\n                    <div className=\"flexRendering\">\r\n                         <div>\r\n                              <input \r\n                                   className=\"checkboxes\"\r\n                                   name=\"IA\"\r\n                                   type=\"checkbox\"\r\n                                   ref=\"IA\"\r\n                                   onChange={ this.filter }\r\n                              />\r\n                              &nbsp;\r\n                              <label for=\"IA\">IA</label>\r\n                         </div>\r\n                         <div>\r\n                              <input \r\n                                   className=\"checkboxes\"\r\n                                   name=\"WebSite-App\"\r\n                                   type=\"checkbox\"\r\n                                   ref=\"WebSite-App\"\r\n                                   onChange={ this.filter }\r\n                              />\r\n                              &nbsp;\r\n                              <label for=\"WebSite-App\">WebSite-App</label>\r\n                         </div>\r\n                         <div>\r\n                              <input \r\n                                   className=\"checkboxes\"\r\n                                   name=\"Software\"\r\n                                   type=\"checkbox\"\r\n                                   ref=\"Software\"\r\n                                   onChange={ this.filter }\r\n                              />\r\n                              &nbsp;\r\n                              <label for=\"Software\">Software</label>\r\n                         </div>\r\n                         <div>\r\n                              <input \r\n                                   className=\"checkboxes\"\r\n                                   name=\"AppMobile\"\r\n                                   type=\"checkbox\"\r\n                                   ref=\"AppMobile\"\r\n                                   onChange={ this.filter }\r\n                              />\r\n                              &nbsp;\r\n                              <label for=\"AppMobile\">AppMobile</label>\r\n                         </div>\r\n                         <div>\r\n                              <input \r\n                                   className=\"checkboxes\"\r\n                                   name=\"Autres\"\r\n                                   type=\"checkbox\"\r\n                                   ref=\"Autres\"\r\n                                   onChange={ this.filter }\r\n                              />\r\n                              &nbsp;\r\n                              <label for=\"Autres\">Autres</label>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Filters","import Rebase from 're-base'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyC-TD-mN3F5k8Vmha14DX82qcYZ4kC5PlI\",\n  authDomain: \"projectmanager-67f9c.firebaseapp.com\",\n  databaseURL: \"https://projectmanager-67f9c.firebaseio.com\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database())\n\n// This is a named export\nexport { firebaseApp }\n\n// this is a default export\nexport default base\n","import React, { Component } from 'react'\r\n// CSS\r\nimport './App.css'\r\n\r\nimport Header from './components/project-manager/Header'\r\nimport Admin from './components/project-manager/Admin'\r\nimport Card from './components/project-manager/Card'\r\nimport BienvenueAdmin from './components/project-manager/BienvenueAdmin'\r\nimport Filters from './components/project-manager/Filters'\r\n\r\n// Firebase\r\nimport base from './base'\r\n\r\nlocalStorage.setItem('listFilters', [])\r\n\r\nclass App extends Component {\r\n  state = {\r\n    pseudo: this.props.match.params.pseudo,\r\n    cpt: 0,\r\n    nState: false,\r\n    toggleAdminPartInner: 'Show',\r\n    projects : {},\r\n    activeFilter: '',\r\n    adminList: '',\r\n    categories: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ref = base.syncState('/StockedData/adminlist', {\r\n      context: this,\r\n      state: \"adminList\"\r\n    })\r\n    this.ref = base.syncState(`/${this.state.pseudo}/projects`, {\r\n      context: this,\r\n      state: 'projects'\r\n    })\r\n    this.ref = base.syncState('/StockedData/categories', {\r\n      context: this,\r\n      state: 'categories'\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    base.removeBinding(this.ref)\r\n  }\r\n\r\n  addProject = project => {\r\n    const projects = { ...this.state.projects }\r\n    let d = new Date()\r\n    projects[`project-${Date.now()}--${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`] = project\r\n    this.setState({ projects })\r\n  }\r\n\r\n  updateProject = (key, newProject) => {\r\n    const projects = { ...this.state.projects }\r\n    projects[key] = newProject\r\n    this.setState({ projects })\r\n  }\r\n\r\n  deleteProject = key => {\r\n    let isCorrect = false\r\n    let CONFIRMATION_CODE = Math.random().toString(36)\r\n    let PROJECT_DELETED = ''\r\n    let NEW_DATE_OBJECT = new Date()\r\n    const CURRENT_DATE = NEW_DATE_OBJECT.getFullYear()+'/'+(NEW_DATE_OBJECT.getMonth()+1)+'/'+NEW_DATE_OBJECT.getDate()+'-'+NEW_DATE_OBJECT.getHours()+'h'+NEW_DATE_OBJECT.getMinutes()+'min'+NEW_DATE_OBJECT.getSeconds()+'s'\r\n    console.log(CONFIRMATION_CODE)\r\n    var askForCode = prompt('Confirmation code') \r\n    switch(true) {\r\n      case askForCode===CONFIRMATION_CODE:\r\n        isCorrect = true\r\n        break;\r\n      case askForCode!==CONFIRMATION_CODE:\r\n        break;\r\n    }\r\n    if(isCorrect) {\r\n      const projects = { ...this.state.projects }\r\n      PROJECT_DELETED = projects[key].nom\r\n      console.log(PROJECT_DELETED+' was deleted at ' + CURRENT_DATE+' by '+this.state.pseudo+' with the next code: '+CONFIRMATION_CODE)\r\n      projects[key] = null\r\n      this.setState({ projects })\r\n    } else {\r\n      // get ip from user\r\n      alert('wrong code, a mail\\'ll be sent to the administrator to check your identity')\r\n    }\r\n    CONFIRMATION_CODE = ''\r\n  }\r\n\r\n  // optimize toggleAdminPart & toggleTDLPart with event target name\r\n\r\n  toggleAdminPart = () => {\r\n    switch(true) {\r\n      case this.state.toggleAdminPartInner===\"Show\":\r\n        this.state.toggleAdminPartInner=\"Hide\"\r\n        break\r\n      case this.state.toggleAdminPartInner!==\"Show\":\r\n        this.state.toggleAdminPartInner=\"Show\"\r\n        break\r\n    }\r\n    this.setState({ nState: !this.state.nState })\r\n  }\r\n\r\n  toggleTDLPart = () => {\r\n    switch(true) {\r\n      case this.state.toggleDisplayTDLInner===\"Show\":\r\n        this.state.toggleDisplayTDLInner = \"Hide\"\r\n        break\r\n      case this.state.toggleDisplayTDLInner!==\"Show\":\r\n        this.state.toggleDisplayTDLInner = \"Show\"\r\n        break\r\n    }\r\n    this.setState({ toggleDisplayTDL: !this.state.toggleDisplayTDL })\r\n  }\r\n\r\n  filter = event => {\r\n    // const declarations\r\n    const checkboxes_ = document.querySelectorAll('.checkboxes')\r\n    const resultsStates = new Array\r\n    let cptTrue = 0\r\n    let finalUpdateState = ''\r\n    // get all states from checkboxes\r\n    for(let i=0; i<checkboxes_.length; i++) {\r\n      if(checkboxes_[i].checked===true) {\r\n        resultsStates.push(true)\r\n      } else {\r\n        resultsStates.push(false)\r\n      }\r\n    }\r\n    // count nb of true in result array\r\n    for(let j=0; j<resultsStates.length; j++) {\r\n      if(resultsStates[j]===true) {\r\n        cptTrue += 1\r\n      } \r\n    }\r\n    // transform to switch/case\r\n    if(cptTrue===1) {\r\n      finalUpdateState = event.target.name\r\n    } else if(cptTrue>1) {\r\n      alert('Choose only one filter + state empty')\r\n      for(let i=0; i<checkboxes_.length; i++) {\r\n        checkboxes_[i].checked = false\r\n      }\r\n    }\r\n    this.setState({ activeFilter: finalUpdateState })\r\n  }\r\n\r\n  renderCards = isFilter => {\r\n    let cards = ''\r\n    const listProjId = new Array\r\n    const test_ = Object.keys(this.state.projects)\r\n    for(let i=0; i<test_.length; i++) {\r\n      listProjId.push((test_)[i])\r\n    }\r\n    // if no filter => render basics cards\r\n    if(isFilter==='') {\r\n      cards = Object.keys(this.state.projects)\r\n        .map(key => <Card key={key} details={this.state.projects[key]} />)\r\n    } \r\n    // if filter => keep only corresponding cards to render it\r\n    else {\r\n\r\n    }\r\n    return cards\r\n  }\r\n\r\n  render () {\r\n    const cards = Object.keys(this.state.projects)\r\n      .map(key => <Card key={key} details={this.state.projects[key]}/>)\r\n      // update cpt\r\n    this.state.cpt = cards.length\r\n\r\n    const CATEGORIES = Object.keys(this.state.categories)\r\n\r\n    return (\r\n      <div className='box'>\r\n        <Header \r\n          pseudo={this.state.pseudo} \r\n          cpt={this.state.cpt}\r\n        />\r\n        {\r\n            this.state.adminList === this.state.pseudo ? (\r\n            <div className=\"bvnadmin\">\r\n              <BienvenueAdmin />\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n\r\n        {/* <Filters /> */}\r\n        \r\n        {\r\n          <div className=\"cards\">\r\n            { this.renderCards(this.state.activeFilter) }\r\n          </div>\r\n        }\r\n        \r\n        <button\r\n          class=\"toggleButton\"\r\n          onClick={() => this.toggleAdminPart()}\r\n        >\r\n          { this.state.toggleAdminPartInner } Admin Part\r\n        </button>\r\n        {\r\n          this.state.nState ? (\r\n            <div>\r\n              <Admin \r\n                projects={this.state.projects}\r\n                updateProject={this.updateProject}\r\n                addProject={this.addProject}\r\n                deleteProject={this.deleteProject}\r\n              />\r\n              <button\r\n                id=\"toggleShowBtn\"\r\n                onClick={() => this.toggleAdminPart()}\r\n              >\r\n                { this.state.toggleAdminPartInner } Admin Part\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n        <footer>\r\n            <h1>© Simon Duperray</h1>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport base from '../../base'\n\nclass Connexion extends Component {\n  state = {\n    pseudo: '',\n    password: '',\n    correctPassword: '',\n    goToApp: false\n  }\n\n  componentDidMount() {\n    this.ref = base.syncState('/StockedData/password', {\n      context: this,\n      state: \"correctPassword\"\n    })\n  }\n\n  goToApp = event => {\n    event.preventDefault()\n    this.setState({ goToApp: true })\n  }\n\n  handleChange = event => {\n    event.preventDefault()\n    let PASSWORDCLASSLIST = document.querySelector('#passwordinput').classList\n    let DEVNAMECLASSLIST = document.querySelector('#pseudoinput').classList\n    this.setState({ [event.target.name]: event.target.value })\n    if(event.target.name===\"password\" && this.state.password===this.state.correctPassword) {\n      PASSWORDCLASSLIST.add('connexionCorrect')\n      DEVNAMECLASSLIST.add('connexionCorrect')\n    } else {\n      PASSWORDCLASSLIST.remove('connexionCorrect')\n      DEVNAMECLASSLIST.remove('connexionCorrect')\n    }\n  }\n\n  render () {\n    if (this.state.goToApp) {\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`} />\n    }\n\n    return (\n      <div className='connexionBox'>\n        <form className='connexion' onSubmit={this.goToApp} >\n          <h1>Project Manager</h1>\n          <input\n            name=\"pseudo\"\n            id=\"pseudoinput\"\n            type='text'\n            value={this.state.pseudo}\n            onChange={this.handleChange}\n            placeholder='Nom du Développeur'\n            pattern='[A-Za-z-]{1,}'\n            required />\n          <input\n          style={{\n            marginTop: '15px'\n          }}\n          name=\"password\"\n          id=\"passwordinput\"\n          type='password'\n          value={this.state.password}\n          onChange={this.handleChange}\n          placeholder='Password'\n          required />\n\n          {\n            this.state.password===this.state.correctPassword ? (\n              <button id=\"gobtn\" type=\"submit\">Go</button>\n            ) : (\n              <div />\n            )\n          }\n          \n          <p style={{fontSize: '11px', textAlign: 'center'}}>Pas de caractères spéciaux.</p>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Connexion","import React from 'react'\n\nconst NotFound = () => <h2 className='notFound'>meme avec render</h2>\n\nexport default NotFound\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport App from './App'\nimport Connexion from './components/project-manager/Connexion'\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker'\n\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nconst Root = () => (\n  // <Router>\n  //   <Switch>\n  //     <Route exact path='/' component={Connexion} />\n  //     <Route path='/pseudo/:pseudo' component={App} />\n  //     <Route component={NotFound} />\n  //   </Switch>\n  // </Router>\n  <Router>\n    <Switch>\n      <Route exact path='/' component={Connexion} />\n      <Route exact path='/pseudo/:pseudo' component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}