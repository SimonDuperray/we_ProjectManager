{"version":3,"sources":["components/adminlist.js","components/project-manager/WelcomeHeader.js","components/project-manager/Header.js","components/categorieslist.js","components/project-manager/AddProject.js","components/project-manager/AdminForm.js","components/project-manager/Admin.js","components/project-manager/InvalidCategory.js","components/project-manager/Card.js","components/project-manager/BienvenueAdmin.js","components/todo-list/TodoList.js","base.js","App.js","components/project-manager/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["adminlist","Array","push","WelcomeHeader","_this$props","this","props","pseudo","welcome","react_default","a","createElement","className","Component","Header","state","nStateHeader","signButton","toggleHeaderInfo","_this","setState","_this2","cpt","pm","pma","id","includes","project_manager_WelcomeHeader","onClick","target","href","categoriesList","fs","require","AddProject","nom","categories","command","description","notes","pattern","createPatternFolderProject","mkdirSync","console","log","err","code","handleChange","event","_event$target","name","value","Object","defineProperty","handleSubmit","preventDefault","project","objectSpread","categorieslist","refs","isPattern","checked","addProject","keys","forEach","item","alert","onSubmit","onChange","type","placeholder","rows","style","marginLeft","color","ref","AdminForm","_ref","key","updateProject","projects","deleteProject","class","e","Admin","project_manager_AddProject","map","project_manager_AdminForm","InvalidCategory","Card","isFinished","checkBold","details","handleFinished","split","for","project_manager_InvalidCategory","fontWeight","textTransform","textDecoration","BienvenueAdmin","textAlign","reactjs_popup_es","trigger","cursor","position","close","TodoList","border","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","localStorage","setItem","App","match","params","nState","toggleAdminPartInner","toggleDisplayTDL","toggleDisplayTDLInner","activeFilter","d","Date","concat","now","getFullYear","getMonth","getDate","newProject","toggleAdminPart","toggleTDLPart","filter","checkboxes_","document","querySelectorAll","resultsStates","cptTrue","finalUpdateState","i","length","j","renderCards","isFilter","cards","listProjId","test_","project_manager_Card","syncState","context","removeBinding","catagories","project_manager_Header","project_manager_BienvenueAdmin","backgroundColor","todo_list_TodoList","project_manager_Admin","Connexion","goToApp","Redirect","to","required","fontSize","React","NotFound","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","Switch","Route","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9897d9b3.chunk.js","sourcesContent":["const adminlist = new Array\r\nadminlist.push('Simon')\r\n\r\nexport default adminlist","import React, { Component } from 'react'\r\n\r\nclass WelcomeHeader extends Component {\r\n    render() {\r\n        const { pseudo, welcome } = this.props\r\n        return(\r\n            <div className=\"row\">\r\n                <h1\r\n                    pseudo={pseudo} \r\n                    welcome={welcome} \r\n                    className=\"row\"\r\n                >\r\n                    {pseudo}{welcome}\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomeHeader","import React, { Component } from 'react'\r\n\r\nimport adminlist from '../adminlist'\r\nimport WelcomeHeader from './WelcomeHeader'\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        nStateHeader: false,\r\n        signButton: '+',\r\n    }\r\n    toggleHeaderInfo = () => {\r\n        if(this.state.signButton===\"+\") {\r\n            this.state.signButton=\"-\"\r\n        } else {\r\n            this.state.signButton=\"+\"\r\n        }\r\n        this.setState({ nStateHeader: !this.state.nStateHeader })    \r\n    }\r\n    render() {\r\n        const { pseudo, cpt } = this.props  \r\n        const pm = \"\\'s Project Manager\"\r\n        const pma = \"\\'s Project Manager *\"\r\n        return(\r\n            <header>\r\n                {\r\n                    !this.state.nStateHeader ? (\r\n                        <div id=\"hiddenHeader\" className=\"rows\">\r\n                            {\r\n                                adminlist.includes(pseudo) ? (\r\n                                    <WelcomeHeader pseudo={pseudo} welcome={pma} />\r\n                                ) : (\r\n                                    <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                                )\r\n                            }\r\n                            <button \r\n                                className=\"row\" \r\n                                id=\"revealHeader\"\r\n                                onClick={() => this.toggleHeaderInfo()}\r\n                            >\r\n                                {this.state.signButton}\r\n                            </button>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <div id=\"showedHeader\" className=\"rows\">\r\n                                {\r\n                                    adminlist.includes(pseudo) ? (\r\n                                        <WelcomeHeader pseudo={pseudo} welcome={pma} />\r\n                                    ) : (\r\n                                        <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                                    )\r\n                                }\r\n                                <button \r\n                                    className=\"row\" \r\n                                    id=\"revealHeader\"\r\n                                    onClick={() => this.toggleHeaderInfo()}\r\n                                >\r\n                                    {this.state.signButton}\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"moreInfoHeader\">\r\n                                <h3 id=\"cptProj\">{cpt} projets en cours!</h3>\r\n                                {\r\n                                    adminlist.includes(pseudo) ? (\r\n                                        <a \r\n                                            onClick={ () => this.toggleHeaderInfo() }\r\n                                            id=\"fireLink\" \r\n                                            target=\"_blank\" \r\n                                            href=\"https://console.firebase.google.com/project/projectmanager-67f9c/database/projectmanager-67f9c/data\"\r\n                                        >\r\n                                            RealTime DataBase - Firebase ↗\r\n                                        </a>\r\n                                    ) : (\r\n                                        <div />\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","const categoriesList = ['IA', 'WebSite-App', 'Software', 'AppMobile', 'Autre']\r\nexport default categoriesList","import React, { Component } from 'react'\r\n\r\nimport categorieslist from '../categorieslist'\r\n\r\nvar fs = require('fs')\r\n\r\nclass AddProject extends Component {\r\n    state = {\r\n        nom: '',\r\n        categories: '',\r\n        command: '',\r\n        description: '',\r\n        notes: '',\r\n        pattern: ''\r\n    }\r\n\r\n    createPatternFolderProject = () => {\r\n        var path = \"C:/Users/simon/OneDrive/Documents/PROGRAMMATION/PROJETS-PM/testFolder\"\r\n        try{\r\n            fs.mkdirSync(path)\r\n            console.log('testFolder directory created')\r\n        } catch(err) {\r\n            if(err.code == 'EEXIST') {\r\n                console.log('The directory named testFolder exists')\r\n            } else {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const project = { ...this.state }\r\n        // check data\r\n        if(project.nom) {\r\n            if(project.description) {\r\n                if(project.categories) {\r\n                    if(categorieslist.includes(project.categories)) {\r\n                        if(this.refs.isPattern.checked){\r\n                            this.setState({ pattern: true })\r\n                            // this.createPatternFolderProject()\r\n                        } else {\r\n                            this.setState({ pattern: false })\r\n                        }\r\n                        this.props.addProject(project)\r\n                        // Reset form\r\n                        Object.keys(project).forEach(item => {\r\n                            project[item] = ''\r\n                        })\r\n                        this.refs.isPattern.checked = false\r\n                        this.setState({ ...project })    \r\n                    } else {\r\n                        alert('La catégorie renseignée ne fait pas partie des catégories disponibles: ' + categorieslist)\r\n                    }\r\n                } else {\r\n                    alert('Indiquez une catégorie de project parmis: ' + categorieslist)\r\n                }\r\n            } else {\r\n                alert('Donnez une description, même courte à votre nouveau projet!')\r\n            }\r\n        } else {\r\n            alert('Donnez un nom à votre projet!')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <form \r\n                    className=\"admin-form ajouter-recette\" \r\n                    onSubmit={ this.handleSubmit }\r\n                >\r\n                    <input \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.nom } \r\n                        name=\"nom\" \r\n                        type=\"text\" \r\n                        placeholder=\"ProjectName*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value={ this.state.categories }\r\n                        name=\"categories\"\r\n                        type=\"text\"\r\n                        placeholder=\"Category*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value= { this.state.command }\r\n                        name=\"command\"\r\n                        type=\"text\"\r\n                        placeholder=\"Batch Command\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.description } \r\n                        name=\"description\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Description*\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.notes } \r\n                        name=\"notes\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Notes\" \r\n                    />\r\n                    <div className=\"rows\">\r\n                        <div style={{marginLeft: '5px'}}>\r\n                            <label style={{color: 'gray'}} className=\"row\">\r\n                                Create pattern folder ?\r\n                            </label>\r\n                            &nbsp;&nbsp;\r\n                            <input \r\n                                className=\"row\"\r\n                                type=\"checkbox\"\r\n                                name=\"isPattern\"\r\n                                id=\"isPattern\"\r\n                                ref=\"isPattern\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\">+ Add project</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddProject","import React from 'react'\r\n\r\nconst AdminForm = ({\r\n    id: key,\r\n    updateProject,\r\n    projects,\r\n    deleteProject\r\n}) => {\r\n    const project = projects[key]\r\n    const handleChange = (event, key) => {\r\n        const { name, value } = event.target\r\n        const project = projects[key]\r\n        project[name] = value\r\n        updateProject(key, project)\r\n    }\r\n    return (\r\n        <div className=\"card\">\r\n            <form className=\"admin-form\">\r\n                <input \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.nom}\r\n                    name=\"nom\" \r\n                    type=\"text\" \r\n                    placeholder=\"ProjectName\" \r\n                />\r\n                <input \r\n                    class=\"row\"\r\n                    onChange={ event => handleChange(event, key) }\r\n                    value={ project.categories }\r\n                    name=\"categories\"\r\n                    type=\"text\"\r\n                    placeholder=\"Categories\"\r\n                />\r\n                <input \r\n                    onChange={event => handleChange(event, key) }\r\n                    value= { project.command }\r\n                    name=\"command\"\r\n                    type=\"text\"\r\n                    placeholder=\"Batch Command\"\r\n                />\r\n                <textarea \r\n                    onChange={e => handleChange(e, key)}\r\n                    value={project.description}\r\n                    name=\"description\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Description\"\r\n                />\r\n                <textarea \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.notes}\r\n                    name=\"notes\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Notes\" \r\n                />\r\n            </form>\r\n            <button onClick={() => deleteProject(key)}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminForm","import React, { Component } from 'react';\r\n\r\nimport AddProject from './AddProject'\r\nimport AdminForm from './AdminForm'\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n        const { projects, addProject, updateProject, deleteProject } = this.props\r\n        return (\r\n            <div className=\"cards\">\r\n                <AddProject addProject={addProject} />\r\n                {\r\n                    Object.keys(projects)\r\n                        .map(key => \r\n                            <AdminForm\r\n                                key={key}\r\n                                id={key}\r\n                                updateProject={updateProject}\r\n                                deleteProject={deleteProject}\r\n                                projects={projects}\r\n                            />\r\n                        )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin","import React, { Component } from \"react\"\r\n\r\nclass InvalidCategory extends Component {\r\n    render() {\r\n        return (\r\n            <p id=\"invalid-category\">Please, update the project's category now!</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InvalidCategory","import React, { Component } from 'react'\r\n\r\nimport categorieslist from '../categorieslist'\r\n\r\nimport InvalidCategory from './InvalidCategory'\r\n\r\nclass Card extends Component {\r\n    state = {\r\n        isFinished: false\r\n    }\r\n\r\n    checkBold = () => {\r\n        let notesString = this.props.details.notes\r\n        return notesString\r\n    }\r\n\r\n    handleFinished = () => {\r\n        this.setState({ isFinished: !this.state.isFinished })\r\n    }\r\n\r\n    render() {\r\n        const { details } = this.props\r\n        const notes = details.notes\r\n            .split('\\n')\r\n            .map(item => \r\n                <li \r\n                    className=\"row\" \r\n                    key={item}\r\n                    // onDoubleClick={() => this.checkBold()}\r\n                >\r\n                    {item}\r\n                </li>\r\n            )\r\n        return (\r\n            <div className={ this.state.isFinished ? 'finishedCard' : 'card' }>\r\n                    <div className=\"recette\">\r\n                        <h2 class=\"projectTitle\" >{details.nom}</h2>\r\n                        <div>\r\n                            <input \r\n                                type=\"checkbox\" \r\n                                name=\"isFinished\" \r\n                                id=\"isFinished\" \r\n                                className=\"isFinishedClass\"\r\n                                onChange={ () => this.handleFinished() }\r\n                            />\r\n                            &nbsp;\r\n                            <label id=\"isFinishedLabel\" for=\"isFinished\">Finished/StableVersion</label>\r\n                        </div>\r\n                        {\r\n                            !details.categories ? (\r\n                                <InvalidCategory />\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        {\r\n                            categorieslist.includes(details.categories) ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;&nbsp;\r\n                                    <span style={{fontWeight: 'bold'}}>\r\n                                        {\r\n                                            details.categories\r\n                                        }\r\n                                    </span>     \r\n                                </p>\r\n                            ) : (\r\n                                \r\n                                <p class=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;\r\n                                    <span style={{fontWeight: 'bold', textTransform: 'uppercase', textDecoration: 'underline'}}>\r\n                                        invalid\r\n                                    </span>\r\n                                </p>\r\n                            )\r\n                        }\r\n                        {\r\n                            details.command ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    BatchCommand:  \r\n                                    <span \r\n                                        style={{fontWeight: 'bold', marginLeft: '5px'}}>\r\n                                        {details.command}\r\n                                    </span>\r\n                                </p>\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        <div className=\"description\">\r\n                            <h4>{ details.description }</h4>\r\n                        </div>\r\n                        <ul>\r\n                            { notes }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react'\r\n\r\nimport Popup from \"reactjs-popup\"\r\nimport adminlist from '../adminlist'\r\n\r\nclass BienvenueAdmin extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <Popup\r\n                    trigger={\r\n                        <h3\r\n                            style={{\r\n                                textDecoration: 'underline',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Bienvenue sur votre compte administrateur\r\n                        </h3>\r\n                    }\r\n                    position=\"bottom center\"\r\n                >\r\n                    {\r\n                        close => (\r\n                            <div>\r\n                                Admin(s): { adminlist }\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <a className=\"close\" onClick={close}>\r\n                                    &times;\r\n                                </a>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BienvenueAdmin","import React, { Component } from 'react'\r\n\r\nclass TodoList extends Component {\r\n    render() {\r\n        return (\r\n            <h3 style={{textAlign: 'center',border:'2px solid black'}}>Test project manager component</h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList","import Rebase from 're-base'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyC-TD-mN3F5k8Vmha14DX82qcYZ4kC5PlI\",\n  authDomain: \"projectmanager-67f9c.firebaseapp.com\",\n  databaseURL: \"https://projectmanager-67f9c.firebaseio.com\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database())\n\n// This is a named export\nexport { firebaseApp }\n\n// this is a default export\nexport default base\n","import React, { Component } from 'react'\r\n// CSS\r\nimport './App.css'\r\n\r\nimport Header from './components/project-manager/Header'\r\nimport Admin from './components/project-manager/Admin'\r\nimport Card from './components/project-manager/Card'\r\nimport BienvenueAdmin from './components/project-manager/BienvenueAdmin'\r\nimport TodoList from './components/todo-list/TodoList'\r\n\r\n// Firebase\r\nimport base from './base'\r\nimport adminlist from './components/adminlist'\r\n\r\nlocalStorage.setItem('listFilters', [])\r\n\r\nclass App extends Component {\r\n  state = {\r\n    pseudo: this.props.match.params.pseudo,\r\n    cpt: 0,\r\n    nState: false,\r\n    toggleAdminPartInner: 'Show',\r\n    projects : {},\r\n    toggleDisplayTDL: false,\r\n    toggleDisplayTDLInner: 'Show',\r\n    activeFilter: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ref = base.syncState(`/${this.state.pseudo}/projects`, {\r\n      context: this,\r\n      state: 'projects'\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    base.removeBinding(this.ref)\r\n  }\r\n\r\n  addProject = project => {\r\n    const projects = { ...this.state.projects }\r\n    let d = new Date()\r\n    projects[`project-${Date.now()}--${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`] = project\r\n    this.setState({ projects })\r\n  }\r\n\r\n  updateProject = (key, newProject) => {\r\n    const projects = { ...this.state.projects }\r\n    projects[key] = newProject\r\n    this.setState({ projects })\r\n  }\r\n\r\n  deleteProject = key => {\r\n    const projects = {  ...this.state.projects }\r\n    projects[key] = null\r\n    this.setState({ projects })\r\n  }\r\n\r\n  toggleAdminPart = () => {\r\n    if(this.state.toggleAdminPartInner===\"Show\") {\r\n      this.state.toggleAdminPartInner = \"Hide\"\r\n    } else {\r\n      this.state.toggleAdminPartInner = \"Show\"\r\n    }\r\n    this.setState({nState: !this.state.nState})\r\n  }\r\n\r\n  toggleTDLPart = () => {\r\n    if(this.state.toggleDisplayTDLInner===\"Show\"){\r\n      this.state.toggleDisplayTDLInner=\"Hide\"\r\n    } else {\r\n      this.state.toggleDisplayTDLInner=\"Show\"\r\n    }\r\n    this.setState({ toggleDisplayTDL: !this.state.toggleDisplayTDL })\r\n  }\r\n\r\n  filter = event => {\r\n    // const declarations\r\n    const checkboxes_ = document.querySelectorAll('.checkboxes')\r\n    const resultsStates = new Array\r\n    let cptTrue = 0\r\n    let finalUpdateState = ''\r\n    // get all states from checkboxes\r\n    for(let i=0; i<checkboxes_.length; i++) {\r\n      if(checkboxes_[i].checked===true) {\r\n        resultsStates.push(true)\r\n      } else {\r\n        resultsStates.push(false)\r\n      }\r\n    }\r\n    // count nb of true in result array\r\n    for(let j=0; j<resultsStates.length; j++) {\r\n      if(resultsStates[j]===true) {\r\n        cptTrue += 1\r\n      } \r\n    }\r\n    // transform to switch/case\r\n    if(cptTrue===1) {\r\n      finalUpdateState = event.target.name\r\n    } else if(cptTrue>1) {\r\n      alert('Choose only one filter + state empty')\r\n      for(let i=0; i<checkboxes_.length; i++) {\r\n        checkboxes_[i].checked = false\r\n      }\r\n    }\r\n    this.setState({ activeFilter: finalUpdateState })\r\n  }\r\n\r\n  renderCards = isFilter => {\r\n    let cards = ''\r\n    const listProjId = new Array\r\n    const test_ = Object.keys(this.state.projects)\r\n    for(let i=0; i<test_.length; i++) {\r\n      listProjId.push((test_)[i])\r\n    }\r\n    // if no filter => render basics cards\r\n    if(isFilter==='') {\r\n      cards = Object.keys(this.state.projects)\r\n        .map(key => <Card key={key} details={this.state.projects[key]} />)\r\n    } \r\n    // if filter => keep only corresponding cards to render it\r\n    else {\r\n\r\n    }\r\n    return cards\r\n  }\r\n\r\n  render () {\r\n    const category = this.props.catagories\r\n    const cards = Object.keys(this.state.projects)\r\n      .map(key => <Card key={key} details={this.state.projects[key]}/>)\r\n      // update cpt\r\n    this.state.cpt = cards.length\r\n  \r\n    return (\r\n      <div className='box'>\r\n        <Header \r\n          pseudo={this.state.pseudo} \r\n          cpt={this.state.cpt}\r\n        />\r\n        {\r\n          adminlist.includes(this.state.pseudo) ? (\r\n            <BienvenueAdmin />\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n\r\n        <button\r\n          className=\"toggleButton\"\r\n          onClick={() => this.toggleTDLPart()}\r\n          style={{\r\n            backgroundColor: '#3498DB',\r\n            border: '1px solid black',\r\n          }}\r\n        >\r\n          { this.state.toggleDisplayTDLInner } TodoList\r\n        </button>\r\n\r\n        {\r\n          this.state.toggleDisplayTDL ? (\r\n            <TodoList />\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n\r\n        <div className=\"filtersRenderCards rows\">\r\n          <div className=\"filterTitle\">\r\n            <h3 id=\"noMgTitleFilters\">Filters</h3>\r\n          </div>\r\n          <div className=\"flexRendering\">\r\n            <div className=\"row\">\r\n              <input \r\n                className=\"checkboxes\"\r\n                name=\"IA\"\r\n                type=\"checkbox\"\r\n                ref=\"IA\"\r\n                onChange={ this.filter }\r\n              />\r\n              &nbsp;\r\n              <label for=\"IA\">IA</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <input \r\n                className=\"checkboxes\"\r\n                name=\"WebSite-App\"\r\n                type=\"checkbox\"\r\n                ref=\"WebSite-App\"\r\n                onChange={ this.filter }\r\n              />\r\n              &nbsp;\r\n              <label for=\"WebSite-App\">WebSite-App</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <input \r\n                className=\"checkboxes\"\r\n                name=\"Software\"\r\n                type=\"checkbox\"\r\n                ref=\"Software\"\r\n                onChange={ this.filter }\r\n              />\r\n              &nbsp;\r\n              <label for=\"Software\">Software</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <input \r\n                className=\"checkboxes\"\r\n                name=\"AppMobile\"\r\n                type=\"checkbox\"\r\n                ref=\"AppMobile\"\r\n                onChange={ this.filter }\r\n              />\r\n              &nbsp;\r\n              <label for=\"AppMobile\">AppMobile</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <input \r\n                className=\"checkboxes\"\r\n                name=\"Autres\"\r\n                type=\"checkbox\"\r\n                ref=\"Autres\"\r\n                onChange={ this.filter }\r\n              />\r\n              &nbsp;\r\n              <label for=\"Autres\">Autres</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {\r\n          <div className=\"cards\">\r\n            { this.renderCards(this.state.activeFilter) }\r\n          </div>\r\n        }\r\n        \r\n        <button\r\n          class=\"toggleButton\"\r\n          onClick={() => this.toggleAdminPart()}\r\n        >\r\n          { this.state.toggleAdminPartInner } Admin Part\r\n        </button>\r\n        {\r\n          this.state.nState ? (\r\n            <div>\r\n              <Admin \r\n                projects={this.state.projects}\r\n                updateProject={this.updateProject}\r\n                addProject={this.addProject}\r\n                deleteProject={this.deleteProject}\r\n              />\r\n              <button\r\n                id=\"toggleShowBtn\"\r\n                onClick={() => this.toggleAdminPart()}\r\n              >\r\n                { this.state.toggleAdminPartInner } Admin Part\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n        <footer>\r\n            <h1>© Simon Duperray</h1>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nclass Connexion extends React.Component {\n  state = {\n    pseudo: '',\n    goToApp: false\n  }\n\n  goToApp = event => {\n    event.preventDefault()\n    this.setState({ goToApp: true })\n  }\n\n  handleChange = event => {\n    const pseudo = event.target.value\n    this.setState({ pseudo })\n  }\n\n  render () {\n    if (this.state.goToApp) {\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`} />\n    }\n\n    return (\n      <div className='connexionBox'>\n        <form className='connexion' onSubmit={this.goToApp} >\n          <h1>Project Manager</h1>\n          <input\n            id=\"askDevName\"\n            type='text'\n            value={this.state.pseudo}\n            onChange={this.handleChange}\n            placeholder='Nom du Développeur'\n            pattern='[A-Za-z-]{1,}'\n            required />\n          <button type='submit'>GO</button>\n          <p style={{fontSize: '11px', textAlign: 'center'}}>Pas de caractères spéciaux.</p>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Connexion\n","import React from 'react'\n\nconst NotFound = () => <h2 className='notFound'>Y'a toujours rien du tout ici!</h2>\n\nexport default NotFound\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport App from './App'\nimport Connexion from './components/project-manager/Connexion'\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nconst Root = () => (\n  <Router>\n    <Switch>\n      <Route exact path='/' component={Connexion} />\n      <Route path='/pseudo/:pseudo' component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()"],"sourceRoot":""}