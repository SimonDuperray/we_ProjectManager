{"version":3,"sources":["components/adminlist.js","components/project-manager/WelcomeHeader.js","components/project-manager/Header.js","base.js","components/categorieslist.js","components/project-manager/AddProject.js","components/project-manager/AdminForm.js","components/project-manager/Admin.js","components/project-manager/InvalidCategory.js","components/project-manager/Card.js","components/project-manager/BienvenueAdmin.js","App.js","components/project-manager/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["adminlist","Array","push","WelcomeHeader","_this$props","this","props","pseudo","welcome","react_default","a","createElement","className","Component","Header","state","nStateHeader","signButton","toggleHeaderInfo","_this","setState","_this2","cpt","pm","id","project_manager_WelcomeHeader","onClick","includes","target","href","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","categoriesList","fs","require","AddProject","nom","categories","command","description","notes","pattern","createPatternFolderProject","mkdirSync","console","log","err","code","handleChange","event","_event$target","name","value","Object","defineProperty","handleSubmit","preventDefault","project","objectSpread","refs","isPattern","checked","addProject","keys","forEach","item","alert","ref","syncState","context","onSubmit","onChange","type","placeholder","rows","style","marginLeft","color","AdminForm","_ref","key","updateProject","projects","deleteProject","class","e","Admin","project_manager_AddProject","map","project_manager_AdminForm","InvalidCategory","Card","isFinished","checkBold","details","split","project_manager_InvalidCategory","categorieslist","fontWeight","textTransform","textDecoration","BienvenueAdmin","textAlign","reactjs_popup_es","trigger","cursor","position","close","App","match","params","cptProj","adminPartState","toggleAdminPartInner","activeFilter","adminList","d","Date","concat","now","getFullYear","getMonth","getDate","newProject","isCorrect","CONFIRMATION_CODE","Math","random","toString","PROJECT_DELETED","NEW_DATE_OBJECT","CURRENT_DATE","getHours","getMinutes","getSeconds","askForCode","prompt","toggleAdminPart","removeBinding","cards","project_manager_Card","length","project_manager_Header","project_manager_BienvenueAdmin","project_manager_Admin","Connexion","password","correctPassword","goToApp","PASSWORDCLASSLIST","document","querySelector","classList","DEVNAMECLASSLIST","add","remove","Redirect","to","required","marginTop","fontSize","NotFound","Boolean","window","location","hostname","ReactDOM","render","HashRouter","Switch","Route","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6fa9a20.chunk.js","sourcesContent":["const adminlist = new Array\r\nadminlist.push('Simon')\r\n\r\nexport default adminlist","import React, { Component } from 'react'\r\n\r\nclass WelcomeHeader extends Component {\r\n    render() {\r\n        const { pseudo, welcome } = this.props\r\n        return(\r\n            <div className=\"row\">\r\n                <h1\r\n                    pseudo={pseudo} \r\n                    welcome={welcome} \r\n                    className=\"row\"\r\n                >\r\n                    {pseudo}{welcome}\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomeHeader","import React, { Component } from 'react'\r\n\r\nimport adminlist from '../adminlist'\r\nimport WelcomeHeader from './WelcomeHeader'\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        nStateHeader: false,\r\n        signButton: '+',\r\n    }\r\n    toggleHeaderInfo = () => {\r\n        if(this.state.signButton===\"+\") {\r\n            this.state.signButton=\"-\"\r\n        } else {\r\n            this.state.signButton=\"+\"\r\n        }\r\n        this.setState({ nStateHeader: !this.state.nStateHeader })    \r\n    }\r\n    render() {\r\n        const { pseudo, cpt } = this.props  \r\n        const pm = \"\\'s Project Manager\"\r\n        return(\r\n            <header>\r\n                {\r\n                    !this.state.nStateHeader ? (\r\n                        <div id=\"hiddenHeader\" className=\"rows\">\r\n                            <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                            <button \r\n                                className=\"row\" \r\n                                id=\"revealHeader\"\r\n                                onClick={() => this.toggleHeaderInfo()}\r\n                            >\r\n                                {this.state.signButton}\r\n                            </button>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <div id=\"showedHeader\" className=\"rows\">\r\n                                <WelcomeHeader pseudo={pseudo} welcome={pm} />\r\n                                <button \r\n                                    className=\"row\" \r\n                                    id=\"revealHeader\"\r\n                                    onClick={() => this.toggleHeaderInfo()}\r\n                                >\r\n                                    {this.state.signButton}\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"moreInfoHeader\">\r\n                                <h3 id=\"cptProj\">{cpt} projets en cours!</h3>\r\n                                {\r\n                                    adminlist.includes(pseudo) ? (\r\n                                        <a \r\n                                            onClick={ () => this.toggleHeaderInfo() }\r\n                                            id=\"fireLink\" \r\n                                            target=\"_blank\" \r\n                                            href=\"https://console.firebase.google.com/project/projectmanager-67f9c/database/projectmanager-67f9c/data\"\r\n                                        >\r\n                                            RealTime DataBase - Firebase ↗\r\n                                        </a>\r\n                                    ) : (\r\n                                        <div />\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import Rebase from 're-base'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyC-TD-mN3F5k8Vmha14DX82qcYZ4kC5PlI\",\n  authDomain: \"projectmanager-67f9c.firebaseapp.com\",\n  databaseURL: \"https://projectmanager-67f9c.firebaseio.com\"\n})\n\nconst base = Rebase.createClass(firebaseApp.database())\n\n// This is a named export\nexport { firebaseApp }\n\n// this is a default export\nexport default base\n","const categoriesList = ['IA', 'WebSite-App', 'Software', 'AppMobile', 'Autre']\r\nexport default categoriesList","import React, { Component } from 'react'\r\n\r\nimport base from '../../base'\r\nimport categoriesList from '../categorieslist'\r\n\r\nvar fs = require('fs')\r\n\r\nclass AddProject extends Component {\r\n    state = {\r\n        nom: '',\r\n        categories: '',\r\n        command: '',\r\n        description: '',\r\n        notes: '',\r\n        pattern: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ref = base.syncState('/StockedData/categories', {\r\n            context: this,\r\n            state: 'categories'\r\n        })\r\n    }\r\n\r\n    createPatternFolderProject = () => {\r\n        var path = \"C:/Users/simon/OneDrive/Documents/PROGRAMMATION/PROJETS-PM/testFolder\"\r\n        try{\r\n            fs.mkdirSync(path)\r\n            console.log('testFolder directory created')\r\n        } catch(err) {\r\n            if(err.code == 'EEXIST') {\r\n                console.log('The directory named testFolder exists')\r\n            } else {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const project = { ...this.state }\r\n        // check data\r\n        if(project.nom) {\r\n            if(project.description) {\r\n                if(project.categories) {\r\n                    if(categoriesList.includes(project.categories)) {\r\n                        if(this.refs.isPattern.checked){\r\n                            this.setState({ pattern: true })\r\n                            // this.createPatternFolderProject()\r\n                        } else {\r\n                            this.setState({ pattern: false })\r\n                        }\r\n                        this.props.addProject(project)\r\n                        // Reset form\r\n                        Object.keys(project).forEach(item => {\r\n                            project[item] = ''\r\n                        })\r\n                        this.refs.isPattern.checked = false\r\n                        this.setState({ ...project })    \r\n                    } else {\r\n                        alert('La catégorie renseignée ne fait pas partie des catégories disponibles: ' + categoriesList)\r\n                    }\r\n                } else {\r\n                    alert('Indiquez une catégorie de project parmis: ' + categoriesList)\r\n                }\r\n            } else {\r\n                alert('Donnez une description, même courte à votre nouveau projet!')\r\n            }\r\n        } else {\r\n            alert('Donnez un nom à votre projet!')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <form \r\n                    className=\"admin-form ajouter-recette\" \r\n                    onSubmit={ this.handleSubmit }\r\n                >\r\n                    <input \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.nom } \r\n                        name=\"nom\" \r\n                        type=\"text\" \r\n                        placeholder=\"ProjectName*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value={ this.state.categories }\r\n                        name=\"categories\"\r\n                        type=\"text\"\r\n                        placeholder=\"Category*\"\r\n                    />\r\n                    <input \r\n                        onChange={ this.handleChange }\r\n                        value= { this.state.command }\r\n                        name=\"command\"\r\n                        type=\"text\"\r\n                        placeholder=\"Batch Command\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.description } \r\n                        name=\"description\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Description*\"\r\n                    />\r\n                    <textarea \r\n                        onChange={ this.handleChange } \r\n                        value={ this.state.notes } \r\n                        name=\"notes\" \r\n                        rows=\"10\" \r\n                        placeholder=\"Notes\" \r\n                    />\r\n                    <div className=\"rows\">\r\n                        <div style={{marginLeft: '5px'}}>\r\n                            <label style={{color: 'gray'}} className=\"row\">\r\n                                Create pattern folder ?\r\n                            </label>\r\n                            &nbsp;&nbsp;\r\n                            <input \r\n                                className=\"row\"\r\n                                type=\"checkbox\"\r\n                                name=\"isPattern\"\r\n                                id=\"isPattern\"\r\n                                ref=\"isPattern\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\">+ Add project</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddProject","import React from 'react'\r\n\r\nconst AdminForm = ({\r\n    id: key,\r\n    updateProject,\r\n    projects,\r\n    deleteProject\r\n}) => {\r\n    const project = projects[key]\r\n    const handleChange = (event, key) => {\r\n        const { name, value } = event.target\r\n        const project = projects[key]\r\n        project[name] = value\r\n        updateProject(key, project)\r\n    }\r\n    return (\r\n        <div className=\"card\">\r\n            <form className=\"admin-form\">\r\n                <input \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.nom}\r\n                    name=\"nom\" \r\n                    type=\"text\" \r\n                    placeholder=\"ProjectName\" \r\n                />\r\n                <input \r\n                    class=\"row\"\r\n                    onChange={ event => handleChange(event, key) }\r\n                    value={ project.categories }\r\n                    name=\"categories\"\r\n                    type=\"text\"\r\n                    placeholder=\"Categories\"\r\n                />\r\n                <input \r\n                    onChange={event => handleChange(event, key) }\r\n                    value= { project.command }\r\n                    name=\"command\"\r\n                    type=\"text\"\r\n                    placeholder=\"Batch Command\"\r\n                />\r\n                <textarea \r\n                    onChange={e => handleChange(e, key)}\r\n                    value={project.description}\r\n                    name=\"description\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Description\"\r\n                />\r\n                <textarea \r\n                    onChange={event => handleChange(event, key)}\r\n                    value={project.notes}\r\n                    name=\"notes\" \r\n                    rows=\"10\" \r\n                    placeholder=\"Notes\" \r\n                />\r\n                {/* <div className=\"rows\">\r\n                    <input \r\n                        className=\"row\"\r\n                        onChange={event => handleChangeCheckbox(event, key)}\r\n                        type=\"radio\"\r\n                        name=\"isFinished\"\r\n                        id=\"isFinished\"\r\n                    />\r\n                    &nbsp;&nbsp;\r\n                    <label className=\"row\" for=\"isFinished\">Finished/StableVersion</label>\r\n                </div> */}\r\n            </form>\r\n            <button onClick={() => deleteProject(key)}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminForm","import React, { Component } from 'react';\r\n\r\nimport AddProject from './AddProject'\r\nimport AdminForm from './AdminForm'\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n        const { projects, addProject, updateProject, deleteProject } = this.props\r\n        return (\r\n            <div className=\"cards\">\r\n                <AddProject addProject={addProject} />\r\n                {\r\n                    Object.keys(projects)\r\n                        .map(key => \r\n                            <AdminForm\r\n                                key={key}\r\n                                id={key}\r\n                                updateProject={updateProject}\r\n                                deleteProject={deleteProject}\r\n                                projects={projects}\r\n                            />\r\n                        )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin","import React, { Component } from \"react\"\r\n\r\nclass InvalidCategory extends Component {\r\n    render() {\r\n        return (\r\n            <p id=\"invalid-category\">Please, update the project's category now!</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InvalidCategory","import React, { Component } from 'react'\r\n\r\nimport categorieslist from '../categorieslist'\r\n\r\nimport InvalidCategory from './InvalidCategory'\r\n\r\nclass Card extends Component {\r\n    state = {\r\n        isFinished: false\r\n    }\r\n\r\n    checkBold = () => {\r\n        let notesString = this.props.details.notes\r\n        return notesString\r\n    }\r\n\r\n    // handleFinished = () => {\r\n    //     this.setState({ isFinished: !this.state.isFinished })\r\n    // }\r\n\r\n    render() {\r\n        const { details } = this.props\r\n        const notes = details.notes\r\n            .split('\\n')\r\n            .map(item => \r\n                <li \r\n                    className=\"row\" \r\n                    key={item}\r\n                    // onDoubleClick={() => this.checkBold()}\r\n                >\r\n                    {item}\r\n                </li>\r\n            )\r\n        return (\r\n            <div className={ this.state.isFinished ? 'finishedCard' : 'card' }>\r\n                    <div className=\"recette\">\r\n                        <h2 class=\"projectTitle\" >{details.nom}</h2>\r\n                        {/* <div>\r\n                            <input \r\n                                type=\"checkbox\" \r\n                                name=\"isFinished\" \r\n                                id=\"isFinished\" \r\n                                className=\"isFinishedClass\"\r\n                                onChange={ () => this.handleFinished() }\r\n                            />\r\n                            &nbsp;\r\n                            <label id=\"isFinishedLabel\" for=\"isFinished\">Finished/StableVersion</label>\r\n                        </div> */}\r\n                        {\r\n                            !details.categories ? (\r\n                                <InvalidCategory />\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        {\r\n                            categorieslist.includes(details.categories) ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;&nbsp;\r\n                                    <span style={{fontWeight: 'bold'}}>\r\n                                        {\r\n                                            details.categories\r\n                                        }\r\n                                    </span>     \r\n                                </p>\r\n                            ) : (\r\n                                \r\n                                <p class=\"infoCardRight\">\r\n                                    Category:\r\n                                    &nbsp;\r\n                                    <span style={{fontWeight: 'bold', textTransform: 'uppercase', textDecoration: 'underline'}}>\r\n                                        invalid\r\n                                    </span>\r\n                                </p>\r\n                            )\r\n                        }\r\n                        {\r\n                            details.command ? (\r\n                                <p className=\"infoCardRight\">\r\n                                    BatchCommand:  \r\n                                    <span \r\n                                        style={{fontWeight: 'bold', marginLeft: '5px'}}>\r\n                                        {details.command}\r\n                                    </span>\r\n                                </p>\r\n                            ) : (\r\n                                <div />\r\n                            )\r\n                        }\r\n                        <div className=\"description\">\r\n                            <h4>{ details.description }</h4>\r\n                        </div>\r\n                        <ul>\r\n                            { notes }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react'\r\n\r\nimport Popup from \"reactjs-popup\"\r\nimport adminlist from '../adminlist'\r\n\r\nclass BienvenueAdmin extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <Popup\r\n                    trigger={\r\n                        <h3\r\n                            style={{\r\n                                textDecoration: 'underline',\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            Bienvenue sur votre compte administrateur\r\n                        </h3>\r\n                    }\r\n                    position=\"bottom center\"\r\n                >\r\n                    {\r\n                        close => (\r\n                            <div>\r\n                                Admin(s): { adminlist }\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                <a className=\"close\" onClick={close}>\r\n                                    &times;\r\n                                </a>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BienvenueAdmin","// NOTES\r\n// -> modifier id todolist pour ne pas pouvoir le supprimer\r\n// -> essayer de le placer en premier sur la liste pour faciliter l acces\r\n\r\nimport React, { Component } from 'react'\r\n\r\n// CSS\r\nimport './App.css'\r\n\r\n// Components\r\nimport Header from './components/project-manager/Header'\r\nimport Admin from './components/project-manager/Admin'\r\nimport Card from './components/project-manager/Card'\r\nimport BienvenueAdmin from './components/project-manager/BienvenueAdmin'\r\n\r\n// Firebase\r\nimport base from './base'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    pseudo: this.props.match.params.pseudo,\r\n    cptProj: 0,\r\n    adminPartState: false,\r\n    toggleAdminPartInner: 'Show',\r\n    projects : {},\r\n    activeFilter: '',\r\n    adminList: '',\r\n    categories: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    // opti ?\r\n    this.ref = base.syncState('/StockedData/adminlist', {\r\n      context: this,\r\n      state: \"adminList\"\r\n    })\r\n    this.ref = base.syncState(`/${this.state.pseudo}/projects`, {\r\n      context: this,\r\n      state: 'projects'\r\n    })\r\n    // this.ref = base.syncState('/StockedData/categories', {\r\n    //   context: this,\r\n    //   state: 'categories'\r\n    // })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    base.removeBinding(this.ref)\r\n  }\r\n\r\n  addProject = project => {\r\n    const projects = { ...this.state.projects }\r\n    let d = new Date()\r\n    projects[`project-${Date.now()}--${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`] = project\r\n    this.setState({ projects })\r\n  }\r\n\r\n  updateProject = (key, newProject) => {\r\n    const projects = { ...this.state.projects }\r\n    projects[key] = newProject\r\n    this.setState({ projects })\r\n  }\r\n\r\n  deleteProject = key => {\r\n    // essayer d'opti\r\n    let isCorrect = false\r\n    let CONFIRMATION_CODE = Math.random().toString(36)\r\n    let PROJECT_DELETED = ''\r\n    let NEW_DATE_OBJECT = new Date()\r\n    const CURRENT_DATE = NEW_DATE_OBJECT.getFullYear()+'/'+(NEW_DATE_OBJECT.getMonth()+1)+'/'+NEW_DATE_OBJECT.getDate()+'-'+NEW_DATE_OBJECT.getHours()+'h'+NEW_DATE_OBJECT.getMinutes()+'min'+NEW_DATE_OBJECT.getSeconds()+'s'\r\n    console.log(CONFIRMATION_CODE)\r\n    var askForCode = prompt('Confirmation code') \r\n    switch(true) {\r\n      case askForCode===CONFIRMATION_CODE:\r\n        isCorrect = true\r\n        break;\r\n      case askForCode!==CONFIRMATION_CODE:\r\n        break;\r\n    }\r\n    if(isCorrect) {\r\n      const projects = { ...this.state.projects }\r\n      PROJECT_DELETED = projects[key].nom\r\n      console.log(PROJECT_DELETED+' was deleted at ' + CURRENT_DATE+' by '+this.state.pseudo+' with the next code: '+CONFIRMATION_CODE)\r\n      projects[key] = null\r\n      this.setState({ projects })\r\n    } else {\r\n      // get ip from user\r\n      alert('wrong code, a mail\\'ll be sent to the administrator to check your identity')\r\n    }\r\n    CONFIRMATION_CODE = ''\r\n  }\r\n\r\n  toggleAdminPart = () => {\r\n    switch(true) {\r\n      case this.state.toggleAdminPartInner===\"Show\":\r\n        this.state.toggleAdminPartInner=\"Hide\"\r\n        break\r\n      case this.state.toggleAdminPartInner!==\"Show\":\r\n        this.state.toggleAdminPartInner=\"Show\"\r\n        break\r\n    }\r\n    this.setState({ adminPartState: !this.state.adminPartState })\r\n  }\r\n\r\n  // filter = event => {\r\n  //   // const declarations\r\n  //   const checkboxes_ = document.querySelectorAll('.checkboxes')\r\n  //   const resultsStates = new Array\r\n  //   let cptTrue = 0\r\n  //   let finalUpdateState = ''\r\n  //   // get all states from checkboxes\r\n  //   for(let i=0; i<checkboxes_.length; i++) {\r\n  //     if(checkboxes_[i].checked===true) {\r\n  //       resultsStates.push(true)\r\n  //     } else {\r\n  //       resultsStates.push(false)\r\n  //     }\r\n  //   }\r\n  //   // count nb of true in result array\r\n  //   for(let j=0; j<resultsStates.length; j++) {\r\n  //     if(resultsStates[j]===true) {\r\n  //       cptTrue += 1\r\n  //     } \r\n  //   }\r\n  //   // transform to switch/case\r\n  //   if(cptTrue===1) {\r\n  //     finalUpdateState = event.target.name\r\n  //   } else if(cptTrue>1) {\r\n  //     alert('Choose only one filter + state empty')\r\n  //     for(let i=0; i<checkboxes_.length; i++) {\r\n  //       checkboxes_[i].checked = false\r\n  //     }\r\n  //   }\r\n  //   this.setState({ activeFilter: finalUpdateState })\r\n  // }\r\n\r\n  // renderCards = isFilter => {\r\n  //   let cards = ''\r\n  //   const listProjId = new Array\r\n  //   const test_ = Object.keys(this.state.projects)\r\n  //   for(let i=0; i<test_.length; i++) {\r\n  //     listProjId.push((test_)[i])\r\n  //   }\r\n  //   // if no filter => render basics cards\r\n  //   if(isFilter==='') {\r\n  //     cards = Object.keys(this.state.projects)\r\n  //       .map(key => <Card key={key} details={this.state.projects[key]} />)\r\n  //   } \r\n  //   // if filter => keep only corresponding cards to render it\r\n  //   else {\r\n\r\n  //   }\r\n  //   return cards\r\n  // }\r\n\r\n  render () {\r\n    const cards = Object.keys(this.state.projects)\r\n      .map(key => <Card key={key} details={this.state.projects[key]}/>)\r\n    \r\n    this.state.cpt = cards.length\r\n\r\n    return (\r\n      <div className='box'>\r\n        <Header \r\n          pseudo={this.state.pseudo} \r\n          cpt={this.state.cpt}\r\n        />\r\n        {\r\n            this.state.adminList === this.state.pseudo ? (\r\n            <div>\r\n              <BienvenueAdmin />\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n\r\n        {/* <Filters /> */}\r\n        \r\n        {\r\n          <div className=\"cards\">\r\n            {/* { this.renderCards(this.state.activeFilter) } */}\r\n            { cards }\r\n          </div>\r\n        }\r\n        \r\n        <button\r\n          class=\"toggleButton\"\r\n          onClick={() => this.toggleAdminPart()}\r\n        >\r\n          { this.state.toggleAdminPartInner } Admin Part\r\n        </button>\r\n        {\r\n          this.state.adminPartState ? (\r\n            <div>\r\n              <Admin \r\n                projects={this.state.projects}\r\n                updateProject={this.updateProject}\r\n                addProject={this.addProject}\r\n                deleteProject={this.deleteProject}\r\n              />\r\n              {/* <button\r\n                class=\"toggleButton\"\r\n                onClick={() => this.toggleAdminPart()}\r\n              >\r\n                { this.state.toggleAdminPartInner } Admin Part\r\n              </button> */}\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )\r\n        }\r\n        <footer>\r\n            <h1>© Simon Duperray</h1>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport base from '../../base'\n\nclass Connexion extends Component {\n  state = {\n    pseudo: '',\n    password: '',\n    correctPassword: '',\n    goToApp: false\n  }\n\n  componentDidMount() {\n    this.ref = base.syncState('/StockedData/password', {\n      context: this,\n      state: \"correctPassword\"\n    })\n  }\n\n  goToApp = event => {\n    event.preventDefault()\n    this.setState({ goToApp: true })\n  }\n\n  handleChange = event => {\n    event.preventDefault()\n    let PASSWORDCLASSLIST = document.querySelector('#passwordinput').classList\n    let DEVNAMECLASSLIST = document.querySelector('#pseudoinput').classList\n    this.setState({ [event.target.name]: event.target.value })\n    if(event.target.name===\"password\" && this.state.password===this.state.correctPassword) {\n      PASSWORDCLASSLIST.add('connexionCorrect')\n      DEVNAMECLASSLIST.add('connexionCorrect')\n    } else {\n      PASSWORDCLASSLIST.remove('connexionCorrect')\n      DEVNAMECLASSLIST.remove('connexionCorrect')\n    }\n  }\n\n  render () {\n    if (this.state.goToApp) {\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`} />\n    }\n\n    return (\n      <div className='connexionBox'>\n        <form className='connexion' onSubmit={this.goToApp} >\n          <h1>Project Manager</h1>\n          <input\n            name=\"pseudo\"\n            id=\"pseudoinput\"\n            type='text'\n            value={this.state.pseudo}\n            onChange={this.handleChange}\n            placeholder='Nom du Développeur'\n            pattern='[A-Za-z-]{1,}'\n            required />\n          <input\n          style={{\n            marginTop: '15px'\n          }}\n          name=\"password\"\n          id=\"passwordinput\"\n          type='password'\n          value={this.state.password}\n          onChange={this.handleChange}\n          placeholder='Password'\n          required />\n\n          {\n            this.state.password===this.state.correctPassword ? (\n              <button id=\"gobtn\" type=\"submit\">Go</button>\n            ) : (\n              <div />\n            )\n          }\n          \n          <p style={{fontSize: '11px', textAlign: 'center'}}>Pas de caractères spéciaux.</p>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Connexion","import React from 'react'\n\nconst NotFound = () => <h2 className='notFound'>meme avec render</h2>\n\nexport default NotFound\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport App from './App'\nimport Connexion from './components/project-manager/Connexion'\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker'\n\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nconst Root = () => (\n  // <Router>\n  //   <Switch>\n  //     <Route exact path='/' component={Connexion} />\n  //     <Route path='/pseudo/:pseudo' component={App} />\n  //     <Route component={NotFound} />\n  //   </Switch>\n  // </Router>\n  <Router>\n    <Switch>\n      <Route exact path='/' component={Connexion} />\n      <Route exact path='/pseudo/:pseudo' component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}